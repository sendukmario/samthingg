import * as solana from "@solana/web3.js"
import bs58 from "bs58";

import {computePriorityFee} from "./instructions";
import {getLUT, JUP_LUT_ADDRESS} from "./lut";

const submitTx = async (base64tx: string): Promise<boolean> => {
    var body = {
        "encoded_transaction": base64tx,
    }

    const response = await fetch("", {
        method: "POST",
        headers: {
            "content-type": "application/json",
        },
        body: JSON.stringify(body),
    })

    return response.status == 200;
}

const main = async () => {
    const connection = new solana.Connection(
        "https://api.mainnet-beta.solana.com",
        "processed",
    )

    const lutAccount = await getLUT(
        connection,
        JUP_LUT_ADDRESS,
    )

    const wallet = solana.Keypair.generate()

    const priorityIxs = computePriorityFee(200_000, 0.01)
    let instructions: solana.TransactionInstruction[] = [
        ...priorityIxs,
    ]


    const blockhash = await connection.getLatestBlockhash("processed")
    const message = new solana.TransactionMessage({
        payerKey: wallet.publicKey,
        instructions: instructions,
        recentBlockhash: blockhash.blockhash,
    }).compileToV0Message([lutAccount!])

    const tx = new solana.VersionedTransaction(message)
    tx.sign([wallet])

    const serializedTx = tx.serialize()
    const base64tx = Buffer.from(serializedTx).toString('base64')

    const success = await submitTx(base64tx)
    // const success = await connection.simulateTransaction(tx)

    if (success) {
        console.log("success tx")
    } else {
        console.log("Failed tx")
    }

    console.log(success)
    console.log("signature: https://solscan.io/tx/"+ bs58.encode(tx.signatures[0]))
}

main()